import  React from 'react';
        import {Anchor,Grid} from '@lugia/lugia-web';
        import EditTables from '../../edit-table'; 
        import TREE from '@lugia/lugia-web/dist/tree/lugia.tree.zh-CN.json';
        import Demo from '../code-box';
        import Title from '../code-box/Title';
         const DefaultTree =  require('./DefaultTree').default;  const DefaultMutlipleTree =  require('./DefaultMutlipleTree').default;  const InlineDataSingleTree =  require('./InlineDataSingleTree').default;  const InlineDataMutlipleTree =  require('./InlineDataMutlipleTree').default;  
        
        const { Link } = Anchor;
        const { Row,Col } = Grid;
        
        export default class ComDemo extends React.Component {
            render(){
                return(
                    <Row>
                        <Col span={20}>
                            <Title title={'树形控件'} subTitle={'Tree'} desc={'清晰地展示层级结构的信息,可展开或折叠。'} />
                            <Demo title={'基本用法'} titleID={'tree-0'} code={<code>{ '/**\n *\n * create by szfeng\n *\n */\nimport * as React from \'react\';\nimport { Tree, Theme } from \'@lugia/lugia-web\';\nimport Widget from \'@lugia/lugia-web/dist/consts\';\n\nconst data = [\n  { key: \'1\', title: \'1\' },\n  { key: \'1.1\', title: \'1.1\', pid: \'1\', path: \'1\' },\n  { key: \'1.1.1\', title: \'1.1.1\', pid: \'1.1\', path: \'1/1.1\' },\n  { key: \'1.1.1.1\', title: \'1.1.1.1\', pid: \'1.1.1\', path: \'1/1.1/1.1.1\' },\n  {\n    key: \'1.1.1.1.1\',\n    title: \'1.1.1.1.1\',\n    pid: \'1.1.1.1\',\n    path: \'1/1.1/1.1.1/1.1.1.1\',\n    isLeaf: true,\n    notCanSelect: true\n  },\n  { key: \'1.2\', title: \'1.2\', pid: \'1\', path: \'1\' },\n  { key: \'1.2.1\', title: \'1.2.1\', pid: \'1.2\', path: \'1/1.2\', isLeaf: true },\n  { key: \'1.2.2\', title: \'1.2.2\', pid: \'1.2\', path: \'1/1.2\' },\n  { key: \'1.2.2.1\', title: \'1.2.2.1\', pid: \'1.2.2\', path: \'1/1.2/1.2.2\' },\n  {\n    key: \'1.2.2.1.1\',\n    title: \'1.2.2.1.1\',\n    pid: \'1.2.2.1\',\n    path: \'1/1.2/1.2.2/1.2.2.1\',\n    isLeaf: true\n  },\n  {\n    key: \'1.2.2.1.2\',\n    title: \'1.2.2.1.2\',\n    pid: \'1.2.2.1\',\n    path: \'1/1.2/1.2.2/1.2.2.1\',\n    isLeaf: true,\n    notCanSelect: true\n  },\n  {\n    key: \'1.2.2.2\',\n    title: \'1.2.2.2\',\n    pid: \'1.2.2\',\n    path: \'1/1.2/1.2.2\',\n    isLeaf: true\n  },\n\n  { key: \'2\', title: \'2\' },\n  { key: \'2.1\', title: \'2.1\', pid: \'2\', path: \'2\' },\n  { key: \'2.1.1\', title: \'2.1.1\', pid: \'2.1\', path: \'2/2.1\', isLeaf: true },\n  { key: \'2.1.2\', title: \'2.1.2\', pid: \'2.1\', path: \'2/2.1\' },\n  {\n    key: \'2.1.2.1\',\n    title: \'2.1.2.1\',\n    pid: \'2.1.2\',\n    path: \'2/2.1/2.1.2\',\n    isLeaf: true\n  }\n];\n\nexport default class DefaultTree extends React.Component<Object, Object> {\n  render() {\n    const config = {\n      [Widget.Tree]: {\n        height: 520,\n        width: 300\n      }\n    };\n    return (\n      <Theme config={config}>\n        <Tree expandAll data={data} igronSelectField={\'notCanSelect\'} />\n      </Theme>\n    );\n  }\n}\n'}</code>} desc={'默认为单选,可通过igronSelectField指定禁选的标识符'}  demo={<DefaultTree />}></Demo><Demo title={'多选的Tree'} titleID={'tree-1'} code={<code>{ '/**\n *\n * create by ligx\n *\n */\nimport * as React from \'react\';\nimport { Tree, Theme } from \'@lugia/lugia-web\';\nimport Widget from \'@lugia/lugia-web/dist/consts\';\n\nconst data = [\n  { key: \'1\', title: \'1\' },\n  { key: \'1.1\', title: \'1.1\', pid: \'1\', path: \'1\' },\n  { key: \'1.1.1\', title: \'1.1.1\', pid: \'1.1\', path: \'1/1.1\' },\n  { key: \'1.1.1.1\', title: \'1.1.1.1\', pid: \'1.1.1\', path: \'1/1.1/1.1.1\' },\n  {\n    key: \'1.1.1.1.1\',\n    title: \'1.1.1.1.1\',\n    pid: \'1.1.1.1\',\n    path: \'1/1.1/1.1.1/1.1.1.1\',\n    isLeaf: true,\n    notCanSelect: true,\n  },\n  { key: \'1.2\', title: \'1.2\', pid: \'1\', path: \'1\' },\n  { key: \'1.2.1\', title: \'1.2.1\', pid: \'1.2\', path: \'1/1.2\', isLeaf: true },\n  { key: \'1.2.2\', title: \'1.2.2\', pid: \'1.2\', path: \'1/1.2\' },\n  { key: \'1.2.2.1\', title: \'1.2.2.1\', pid: \'1.2.2\', path: \'1/1.2/1.2.2\' },\n  {\n    key: \'1.2.2.1.1\',\n    title: \'1.2.2.1.1\',\n    pid: \'1.2.2.1\',\n    path: \'1/1.2/1.2.2/1.2.2.1\',\n    isLeaf: true,\n  },\n  {\n    key: \'1.2.2.1.2\',\n    title: \'1.2.2.1.2\',\n    pid: \'1.2.2.1\',\n    path: \'1/1.2/1.2.2/1.2.2.1\',\n    isLeaf: true,\n    notCanSelect: true,\n  },\n  { key: \'1.2.2.2\', title: \'1.2.2.2\', pid: \'1.2.2\', path: \'1/1.2/1.2.2\', isLeaf: true },\n\n  { key: \'2\', title: \'2\' },\n  { key: \'2.1\', title: \'2.1\', pid: \'2\', path: \'2\' },\n  { key: \'2.1.1\', title: \'2.1.1\', pid: \'2.1\', path: \'2/2.1\', isLeaf: true },\n  { key: \'2.1.2\', title: \'2.1.2\', pid: \'2.1\', path: \'2/2.1\' },\n  { key: \'2.1.2.1\', title: \'2.1.2.1\', pid: \'2.1.2\', path: \'2/2.1/2.1.2\', isLeaf: true },\n];\n\nexport default class DefaultMutlipleTree extends React.Component<Object, Object> {\n  render() {\n    const config = {\n      [Widget.Tree]: {\n        height: 520,\n        width: 300,\n      },\n    };\n    return (\n      <Theme config={config}>\n        <Tree expandAll mutliple data={data} igronSelectField={\'notCanSelect\'} />\n      </Theme>\n    );\n  }\n}\n'}</code>} desc={'多选的Tree,可通过igronSelectField指定禁选的标识符'}  demo={<DefaultMutlipleTree />}></Demo><Demo title={'嵌套数据的单选Tree'} titleID={'tree-2'} code={<code>{ '/**\n *\n * create by szfeng\n *\n */\nimport * as React from \'react\';\nimport { Tree, Theme } from \'@lugia/lugia-web\';\nimport Widget from \'@lugia/lugia-web/dist/consts\';\n\nconst data = [\n  {\n    value: \'Components\',\n    text: \'Components\',\n    children: [\n      {\n        value: \'General\',\n        text: \'General\',\n        children: [\n          {\n            value: \'Button\',\n            text: \'Button\',\n            icon: \'lugia-icon-financial_add_pic\',\n            disabled: true\n          },\n          { value: \'Icon\', text: \'Icon\', icon: \'lugia-icon-financial_archive\' }\n        ]\n      },\n\n      {\n        value: \'Layout\',\n        text: \'Layout\',\n        children: [\n          { value: \'Grid\', text: \'Grid\', disabled: true },\n          { value: \'Layout\', text: \'Layout\' }\n        ]\n      },\n\n      {\n        value: \'Navigation\',\n        text: \'Navigation\',\n        children: [\n          { value: \'Affix\', text: \'Affix\' },\n          { value: \'Breadcrumb\', text: \'Breadcrumb\' },\n          { value: \'Dropdown\', text: \'Dropdown\' },\n          { value: \'Menu\', text: \'Menu\' },\n          { value: \'Pagination\', text: \'Pagination\' },\n          { value: \'Steps\', text: \'Steps\' }\n        ]\n      },\n\n      {\n        value: \'Data Entry\',\n        text: \'Data Entry\',\n        children: [\n          { value: \'AutoComplete\', text: \'AutoComplete\' },\n          { value: \'Cascader\', text: \'Cascader\' },\n          { value: \'Checkbox\', text: \'Checkbox\' },\n          { value: \'DatePicker\', text: \'DatePicker\' },\n          { value: \'Form\', text: \'Form\' },\n          { value: \'Input\', text: \'Input\' }\n        ]\n      }\n    ]\n  }\n];\n\nexport default class InlineDataSingleTree extends React.Component<\n  Object,\n  Object\n> {\n  render() {\n    const config = {\n      [Widget.Tree]: {\n        height: 520,\n        width: 300\n      }\n    };\n    return (\n      <Theme config={config}>\n        <Tree\n          expandAll\n          data={data}\n          translateTreeData={true}\n          valueField={\'value\'}\n          displayField={\'text\'}\n        />\n      </Theme>\n    );\n  }\n}\n'}</code>} desc={'通过指定translateTreeData：true,组件内部将嵌套数据自动转换成Tree型展开数据,可通过disabled指定禁选的项。注意需要指定valueField和displayField'}  demo={<InlineDataSingleTree />}></Demo><Demo title={'嵌套数据的多选Tree'} titleID={'tree-3'} code={<code>{ '/**\n *\n * create by szfeng\n *\n */\nimport * as React from \'react\';\nimport { Tree, Theme } from \'@lugia/lugia-web\';\nimport Widget from \'@lugia/lugia-web/dist/consts\';\n\nconst data = [\n  {\n    value: \'Components\',\n    text: \'Components\',\n    children: [\n      {\n        value: \'General\',\n        text: \'General\',\n        children: [\n          {\n            value: \'Button\',\n            text: \'Button\',\n            icon: \'lugia-icon-financial_add_pic\',\n            disabled: true\n          },\n          { value: \'Icon\', text: \'Icon\', icon: \'lugia-icon-financial_archive\' }\n        ]\n      },\n\n      {\n        value: \'Layout\',\n        text: \'Layout\',\n        children: [\n          { value: \'Grid\', text: \'Grid\', disabled: true },\n          { value: \'Layout\', text: \'Layout\' }\n        ]\n      },\n\n      {\n        value: \'Navigation\',\n        text: \'Navigation\',\n        children: [\n          { value: \'Affix\', text: \'Affix\' },\n          { value: \'Breadcrumb\', text: \'Breadcrumb\' },\n          { value: \'Dropdown\', text: \'Dropdown\' },\n          { value: \'Menu\', text: \'Menu\' },\n          { value: \'Pagination\', text: \'Pagination\' },\n          { value: \'Steps\', text: \'Steps\' }\n        ]\n      },\n\n      {\n        value: \'Data Entry\',\n        text: \'Data Entry\',\n        children: [\n          { value: \'AutoComplete\', text: \'AutoComplete\' },\n          { value: \'Cascader\', text: \'Cascader\' },\n          { value: \'Checkbox\', text: \'Checkbox\' },\n          { value: \'DatePicker\', text: \'DatePicker\' },\n          { value: \'Form\', text: \'Form\' },\n          { value: \'Input\', text: \'Input\' }\n        ]\n      }\n    ]\n  }\n];\n\nexport default class InlineDataMutlipleTree extends React.Component<\n  Object,\n  Object\n> {\n  render() {\n    const config = {\n      [Widget.Tree]: {\n        height: 520,\n        width: 300\n      }\n    };\n    return (\n      <Theme config={config}>\n        <Tree\n          expandAll\n          data={data}\n          mutliple\n          translateTreeData={true}\n          valueField={\'value\'}\n          displayField={\'text\'}\n        />\n      </Theme>\n    );\n  }\n}\n'}</code>} desc={'通过指定translateTreeData：true,组件内部将嵌套数据自动转换成Tree型展开数据,可通过disabled指定禁选的项,通过mutliple生成多选Tree。注意需要指定valueField和displayField'}  demo={<InlineDataMutlipleTree />}></Demo>
                            <EditTables dataSource={TREE} />
                        </Col>
                        <Col span={4}>
                            <Anchor  slideType="line">
                                <Link title={'基本用法'} href={'#tree-0'} /><Link title={'多选的Tree'} href={'#tree-1'} /><Link title={'嵌套数据的单选Tree'} href={'#tree-2'} /><Link title={'嵌套数据的多选Tree'} href={'#tree-3'} />
                            </Anchor>
                        </Col>
                    </Row>
                );
            }
         }   
        
